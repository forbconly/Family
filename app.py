import streamlit as st
import os
import re
import random
from datetime import datetime, timedelta
from openai import OpenAI
from dotenv import load_dotenv

# Load environment variables from .env file for local development
load_dotenv()

# --- UI Text Translations ---
# Central dictionary for handling English and Hindi translations
UI_TEXT = {
    "English üá¨üáß": {
        "page_title": "Family AI",
        "app_title": "ü§ñ Aaradhana Family AI",
        "next_event_header": "üóìÔ∏è Next Event: ",
        "today": "is today!",
        "tomorrow": "is tomorrow!",
        "in_days": "is in {days} days",
        "birthday": "birthday",
        "anniversary": "anniversary",
        "years": "years",
        "chat_tab": "üí¨ Chatbot",
        "chat_welcome": "Ask me anything about the family! Like, Who is the Bullet Raja of the family?",
        "chat_input_placeholder": "What do you want to know?",
        "thinking": "Thinking...",
        "trivia_tab": "üèÜ Family Trivia Game",
        "trivia_header": "How well do you know the family?",
        "trivia_button": "Start New Game / Next Question",
        "trivia_form_header": "Choose your answer:",
        "trivia_submit": "Submit Answer",
        "trivia_correct": "Correct! You're a family expert!",
        "trivia_incorrect": "Not quite! The correct answer was: {answer}"
    },
    "Hindi üáÆüá≥": {
        "page_title": "‡§´‡•à‡§Æ‡§ø‡§≤‡•Ä ‡§è‡§Ü‡§à",
        "app_title": "ü§ñ ‡§Ü‡§∞‡§æ‡§ß‡§®‡§æ ‡§´‡•à‡§Æ‡§ø‡§≤‡•Ä AI",
        "next_event_header": "üóìÔ∏è ‡§Ö‡§ó‡§≤‡§æ ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§ï‡•ç‡§∞‡§Æ: ",
        "today": "‡§Ü‡§ú ‡§π‡•à!",
        "tomorrow": "‡§ï‡§≤ ‡§π‡•à!",
        "in_days": "{days} ‡§¶‡§ø‡§®‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§π‡•à",
        "birthday": "‡§ú‡§®‡•ç‡§Æ‡§¶‡§ø‡§®",
        "anniversary": "‡§∏‡§æ‡§≤‡§ó‡§ø‡§∞‡§π",
        "years": "‡§∏‡§æ‡§≤",
        "chat_tab": "üí¨ ‡§ö‡•à‡§ü‡§¨‡•â‡§ü",
        "chat_welcome": "‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§ï‡•Å‡§õ ‡§≠‡•Ä ‡§™‡•Ç‡§õ‡•á‡§Ç! ‡§ú‡•à‡§∏‡•á, ‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§ï‡§æ ‡§¨‡•Å‡§≤‡•á‡§ü ‡§∞‡§æ‡§ú‡§æ ‡§ï‡•å‡§® ‡§π‡•à?",
        "chat_input_placeholder": "‡§Ü‡§™ ‡§ï‡•ç‡§Ø‡§æ ‡§ú‡§æ‡§®‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç?",
        "thinking": "‡§∏‡•ã‡§ö ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Å...",
        "trivia_tab": "üèÜ ‡§™‡§æ‡§∞‡§ø‡§µ‡§æ‡§∞‡§ø‡§ï ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§ú‡•ç‡§û‡§æ‡§®",
        "trivia_header": "‡§Ü‡§™ ‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§ï‡•ã ‡§ï‡§ø‡§§‡§®‡§æ ‡§ú‡§æ‡§®‡§§‡•á ‡§π‡•à‡§Ç?",
        "trivia_button": "‡§®‡§Ø‡§æ ‡§ó‡•á‡§Æ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç / ‡§Ö‡§ó‡§≤‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§®",
        "trivia_form_header": "‡§Ö‡§™‡§®‡§æ ‡§â‡§§‡•ç‡§§‡§∞ ‡§ö‡•Å‡§®‡•á‡§Ç:",
        "trivia_submit": "‡§â‡§§‡•ç‡§§‡§∞ ‡§∏‡§¨‡§Æ‡§ø‡§ü ‡§ï‡§∞‡•á‡§Ç",
        "trivia_correct": "‡§∏‡§π‡•Ä! ‡§Ü‡§™ ‡§è‡§ï ‡§™‡§æ‡§∞‡§ø‡§µ‡§æ‡§∞‡§ø‡§ï ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§π‡•à‡§Ç!",
        "trivia_incorrect": "‡§∏‡§π‡•Ä ‡§®‡§π‡•Ä‡§Ç! ‡§∏‡§π‡•Ä ‡§â‡§§‡•ç‡§§‡§∞ ‡§•‡§æ: {answer}"
    }
}

# --- Helper Functions ---
def load_family_data(filepath="family_data.md"):
    """Loads family data from a markdown file."""
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            return f.read()
    except FileNotFoundError:
        st.error(f"Error: The data file '{filepath}' was not found.")
        st.info("Please make sure you have a `family_data.md` file in the same directory.")
        st.stop()
        return None

# --- Feature Functions ---
def get_next_event_message(family_data, lang_text):
    """
    Parses the family data to find the next upcoming birthday or anniversary.
    """
    today_date = datetime.now().date()
    next_event = None
    smallest_delta = timedelta(days=367) # Initialize with a value larger than a year

    # Regex to find all person data blocks, ignoring case for end marker
    person_blocks = re.findall(r'---Person Start---(.*?)---Person Ends?---', family_data, re.DOTALL | re.IGNORECASE)
    
    for block in person_blocks:
        name_match = re.search(r'Name:\s*(.*)', block)
        if not name_match:
            continue
        name = name_match.group(1).strip()
        
        event_types = [
            ("Born", lang_text["birthday"]),
            ("Anniversary", lang_text["anniversary"])
        ]
        
        for tag, event_name in event_types:
            # More specific regex to find dates like "Month Day, Year" or "Month Day"
            date_match = re.search(fr'{tag}:\s*([A-Za-z]+\s\d{{1,2}}(?:,\s*\d{{4}})?)\s*$', block, re.MULTILINE)
            if date_match:
                date_str = date_match.group(1).strip().replace(',', '')
                event_date = None
                has_year = False
                
                # Try parsing with year first, then without
                try:
                    event_date = datetime.strptime(date_str, '%B %d %Y')
                    has_year = True
                except ValueError:
                    try:
                        # Use a placeholder year for events without one, makes calculation easier
                        event_date = datetime.strptime(date_str + " 1900", '%B %d %Y')
                    except ValueError:
                        # Skip if date format is invalid
                        continue
                
                # Determine the next occurrence of this event
                next_occurrence_dt = event_date.replace(year=today_date.year)
                if next_occurrence_dt.date() < today_date:
                    next_occurrence_dt = next_occurrence_dt.replace(year=today_date.year + 1)
                
                delta = next_occurrence_dt.date() - today_date
                
                if 0 <= delta.days < smallest_delta.days:
                    smallest_delta = delta
                    year_diff = next_occurrence_dt.year - event_date.year if has_year else None
                    next_event = {
                        "name": name,
                        "year_diff": year_diff,
                        "date": next_occurrence_dt,
                        "delta": delta,
                        "type": event_name
                    }

    if not next_event:
        return ""
    
    event_date_str = next_event['date'].strftime('%B %d')
    delta_days = next_event['delta'].days
    
    if delta_days == 0:
        day_info = lang_text["today"]
    elif delta_days == 1:
        day_info = lang_text["tomorrow"]
    else:
        day_info = lang_text["in_days"].format(days=delta_days)
    
    event_details = ""
    if next_event['year_diff'] is not None:
        if next_event['type'] == lang_text["birthday"]:
            event_details = f"({next_event['year_diff']})"
        else:
            event_details = f"({next_event['year_diff']} {lang_text['years']})"
            
    return (f"{lang_text['next_event_header']}**{next_event['name']}'s** {next_event['type']} {event_details} "
            f"{day_info} on **{event_date_str}**.")


def parse_data_for_quiz(family_data):
    """Parses facts from the family data to be used in the trivia quiz."""
    facts = []
    person_blocks = re.findall(r'---Person Start---(.*?)---Person Ends?---', family_data, re.DOTALL | re.IGNORECASE)
    for block in person_blocks:
        name_match = re.search(r'Name:\s*(.*)', block)
        if name_match:
            name = name_match.group(1).strip()
            # Find all lines that are not empty and don't match the standard fields
            fact_matches = re.findall(r'(\w[\w\s]+):\s*(.*)', block)
            for fact_type, fact_value in fact_matches:
                # Exclude structural or date fields from being "facts"
                if fact_type.strip() not in ["Name", "Born", "Anniversary"]:
                    facts.append({"person": name, "fact_type": fact_type.strip(), "fact_value": fact_value.strip()})
    return facts

def generate_quiz_question(facts, lang_text):
    """Generates a single quiz question with multiple choice options."""
    if len(facts) < 3:
        return None # Not enough facts to create a meaningful question

    correct_fact = random.choice(facts)
    
    # Define question templates for both languages
    question_templates = {
        "English üá¨üáß": "Regarding {person}, what is one of their '{fact_type}'?",
        "Hindi üáÆüá≥": "{person} ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç, ‡§â‡§®‡§ï‡•Ä ‡§è‡§ï '{fact_type}' ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?"
    }
    
    question = question_templates[language].format(
        person=correct_fact['person'],
        fact_type=correct_fact['fact_type']
    )
    
    correct_answer = correct_fact['fact_value']
    
    # Create a pool of potential incorrect answers from different people or fact types
    incorrect_options_pool = [f['fact_value'] for f in facts if f['fact_value'] != correct_answer]
    
    if len(incorrect_options_pool) < 2:
        return None # Not enough variety for incorrect options

    incorrect_answers = random.sample(incorrect_options_pool, 2)
    options = [correct_answer] + incorrect_answers
    random.shuffle(options)
    
    return {"question": question, "options": options, "correct_answer": correct_answer}

def get_ai_response(client, messages, model):
    """Gets a response from the AI model."""
    try:
        chat_completion = client.chat.completions.create(
            messages=messages,
            model=model
        )
        return chat_completion.choices[0].message.content
    except Exception as e:
        st.error(f"An error occurred while contacting the AI model: {e}")
        return None

# --- Streamlit App ---

# Set page configuration
st.set_page_config(page_title="Family AI", page_icon="üë®‚Äçüë©‚Äçüëß‚Äçüë¶")

# Sidebar for settings
st.sidebar.title("Settings")
language = st.sidebar.radio("Choose language | ‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç", list(UI_TEXT.keys()))
lang_text = UI_TEXT[language]

# Main title
st.title(lang_text["app_title"])

# Load data and AI model configuration
family_data = load_family_data()
# Make the model configurable via environment variables for flexibility.
# Switched default model to one less likely to have data policy issues on OpenRouter.
OPENROUTER_MODEL = os.getenv("OPENROUTER_MODEL", "meta-llama/llama-3-70b-instruct")

try:
    # Use st.secrets for deployed apps, fallback to os.environ for local
    openrouter_api_key = st.secrets.get("OPENROUTER_API_KEY", os.getenv("OPENROUTER_API_KEY"))
    if not openrouter_api_key:
        raise KeyError
    
    client = OpenAI(
      base_url="https://openrouter.ai/api/v1",
      api_key=openrouter_api_key,
    )
except KeyError:
    st.error("OPENROUTER_API_KEY not found! Please set it in your .env file or Streamlit Secrets.")
    st.stop()

# Display the next event message
next_event_msg = get_next_event_message(family_data, lang_text)
if next_event_msg:
    st.info(next_event_msg)

# Create tabs for Chatbot and Trivia
tab1, tab2 = st.tabs([lang_text["chat_tab"], lang_text["trivia_tab"]])

# --- Chatbot Tab ---
with tab1:
    st.write(lang_text["chat_welcome"])
    
    # Initialize or reset chat state if language changes
    if "messages" not in st.session_state or st.session_state.get("language") != language:
        st.session_state.language = language
        if language == "English üá¨üáß":
            system_prompt = f"""You are a witty, creative, and respectful AI assistant for a family. Your name is 'FamBot'. 
Your strict rules are: be funny, respectful, diplomatic, and always add a fun fact. 
Base all your answers strictly on the following Family Knowledge Base.
---
Family Knowledge Base:
{family_data}
---"""
        else: # Hindi
            system_prompt = f"""‡§Ü‡§™ ‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§ï ‡§Æ‡§ú‡§æ‡§ï‡§ø‡§Ø‡§æ, ‡§∞‡§ö‡§®‡§æ‡§§‡•ç‡§Æ‡§ï ‡§î‡§∞ ‡§∏‡§Æ‡•ç‡§Æ‡§æ‡§®‡§ú‡§®‡§ï ‡§è‡§Ü‡§à ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§π‡•à‡§Ç‡•§ ‡§Ü‡§™‡§ï‡§æ ‡§®‡§æ‡§Æ 'FamBot' ‡§π‡•à‡•§ ‡§Ü‡§™‡§ï‡§æ ‡§™‡•Ç‡§∞‡§æ ‡§µ‡§æ‡§∞‡•ç‡§§‡§æ‡§≤‡§æ‡§™ ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§
‡§Ü‡§™‡§ï‡•á ‡§∏‡§ñ‡•ç‡§§ ‡§®‡§ø‡§Ø‡§Æ ‡§π‡•à‡§Ç:
1. ‡§™‡§π‡§≤‡•á, ‡§¶‡§ø‡§è ‡§ó‡§è ‡§ú‡•ç‡§û‡§æ‡§® ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞ ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡•á ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§ï‡§æ ‡§∏‡•Ä‡§ß‡•á ‡§â‡§§‡•ç‡§§‡§∞ ‡§¶‡•á‡§Ç‡•§
2. ‡§â‡§§‡•ç‡§§‡§∞ ‡§ï‡•á ‡§¨‡§æ‡§¶, ‡§π‡§Æ‡•á‡§∂‡§æ ‡§è‡§ï ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§, ‡§∞‡§ö‡§®‡§æ‡§§‡•ç‡§Æ‡§ï "‡§∞‡•ã‡§ö‡§ï ‡§§‡§•‡•ç‡§Ø" (fun fact) ‡§ú‡•ã‡§°‡§º‡•á‡§Ç‡•§
3. ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§™‡§∞‡§ï ‡§™‡•ç‡§∞‡§∂‡•ç‡§®‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è (‡§ú‡•à‡§∏‡•á "‡§∏‡§¨‡§∏‡•á ‡§¨‡•Å‡§¶‡•ç‡§ß‡§ø‡§Æ‡§æ‡§® ‡§ï‡•å‡§® ‡§π‡•à?"), ‡§Ü‡§™‡§ï‡•ã ‡§ï‡•Ç‡§ü‡§®‡•Ä‡§§‡§ø‡§ï ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§
4. ‡§Ü‡§™‡§ï‡§æ ‡§≤‡§π‡§ú‡§æ ‡§Æ‡§ú‡§æ‡§ï‡§ø‡§Ø‡§æ, ‡§Ü‡§ï‡§∞‡•ç‡§∑‡§ï ‡§î‡§∞ ‡§π‡§Æ‡•á‡§∂‡§æ ‡§∏‡§Æ‡•ç‡§Æ‡§æ‡§®‡§ú‡§®‡§ï ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§
5. ‡§Ö‡§™‡§®‡•á ‡§∏‡§≠‡•Ä ‡§â‡§§‡•ç‡§§‡§∞ ‡§ï‡•á‡§µ‡§≤ ‡§®‡§ø‡§Æ‡•ç‡§®‡§≤‡§ø‡§ñ‡§ø‡§§ ‡§™‡§æ‡§∞‡§ø‡§µ‡§æ‡§∞‡§ø‡§ï ‡§ú‡•ç‡§û‡§æ‡§® ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞ ‡§¶‡•á‡§Ç‡•§
---
‡§™‡§æ‡§∞‡§ø‡§µ‡§æ‡§∞‡§ø‡§ï ‡§ú‡•ç‡§û‡§æ‡§®:
{family_data}
---"""
        st.session_state.messages = [{"role": "system", "content": system_prompt}]

    # Display past messages
    for message in st.session_state.messages:
        if message["role"] != "system":
            with st.chat_message(message["role"]):
                st.markdown(message["content"])

    # Handle new user input
    if prompt := st.chat_input(lang_text["chat_input_placeholder"]):
        st.session_state.messages.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)
        
        with st.chat_message("assistant"):
            with st.spinner(lang_text["thinking"]):
                response = get_ai_response(client, st.session_state.messages, OPENROUTER_MODEL)
                if response:
                    st.markdown(response)
                    st.session_state.messages.append({"role": "assistant", "content": response})

# --- Family Trivia Tab ---
with tab2:
    st.header(lang_text["trivia_header"])
    
    # Initialize quiz facts if they don't exist in the session state
    if 'quiz_facts' not in st.session_state:
        st.session_state.quiz_facts = parse_data_for_quiz(family_data)
        
    if st.button(lang_text["trivia_button"]):
        st.session_state.quiz_question = generate_quiz_question(st.session_state.quiz_facts, lang_text)
        st.session_state.answered = False # Reset answered state for new question

    if 'quiz_question' in st.session_state and st.session_state.quiz_question:
        q = st.session_state.quiz_question
        st.subheader(q['question'])
        
        with st.form("quiz_form"):
            selected_option = st.radio(lang_text["trivia_form_header"], q['options'], key="quiz_options")
            submitted = st.form_submit_button(lang_text["trivia_submit"])
            
            if submitted and not st.session_state.get('answered', False):
                st.session_state.answered = True
                if selected_option == q['correct_answer']:
                    st.success(lang_text["trivia_correct"])
                else:
                    st.error(lang_text["trivia_incorrect"].format(answer=q['correct_answer']))

